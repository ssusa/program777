<%= render "/articles/article_header" %>
<p>
  今回から一覧画面を作成します。
  一覧画面はタスク管理アプリの中で一番ボリュームが多い画面なので、
  2回に分けました。
  今回はデータの取得、表示をします。
  念のため、前回までで終わっていることを以下に記載しておきました。
</p>

<p style="font-weight: bold">
  前回までの内容
</p>

<ul>
  <li>コントローラー、VIEW、モデルのそれぞれのファイルを作成</li>
  <li>画面のレイアウトが完成（ヘッダー、フッター）</li>
  <li>ルーティングの設定が完了（URLから任意のページへ飛ばすことができる）</li>
  <li>データベース、テストデータ登録済み</li>
</ul>

<p>
一覧の表示には4ファイルを修正します。
それぞれ解説しますが、
<strong>難しい場合はコントローラーからTaskモデルを経由してデータを取得し、
VIEWに表示しているという流れがわかればOKです。</strong>
一度完成させたあとにソースを見直すと、頭に入りやすいかと思います。
</p>

<br>
<h2 class="midashi01">①tasks_controller.rb編集</h2>

<span class="prettyprint-filename">/app/controllers/tasks_controller.rb</span>
<pre class="prettyprint linenums">
#一覧画面 表示のアクション
def index

  #データの取得
  @tasks = Task
    .by_kanryo(params[:kanryo])
    .paginate(page: params[:page], per_page: 5)
    .order('kanryo asc, kigen asc')

  #No列の開始No
  @grid_no = 1

  #params[:page]がNullまたは空ではない場合
  if params[:page].present?
    #開始No = ページ × ページングサイズ
    @grid_no = (params[:page].to_i - 1) * 5 + 1
  end

end
</pre>

<p>
  5行目〜8行目でデータの取得を行っています。
</p>
<p>
  5行目の@taskは変数です。@から始まる変数はインスタンス変数と呼ばれます。
  取得したActiveRecord配列を格納するための変数で、このインスタンス変数はVIEWで使用することができます。
</p>
<p>
  6行目はTaskモデルのby_kanryoスコープを呼び出しています。
  params[:kanryo]の値を渡しています。ここには「nil」か「"true"」か「"false"」が入ってきます。
</p>
<p>
  7行目はページネーションを使用するときの書き方です。
  簡単にページングが出来るということだけ覚えておいて下さい。
  will_paginateというgemの機能で、<a style="text-decoration: underline" href="/articles/201709/20170930">この記事</a>でGemFileに書いて「bundle install」したものです。
</p>
<p>
  8行目でソートしています。
</p>
<p>
  この<strong>5行目から8行目の実行タイミングでby_kanryoスコープの絞り込み、ページネーション、ソートを考慮したSQLが発行されます</strong>。
</p>
<p>
  11行目以降はグリッドの1列目の開始Noを取得しています。Noはただの飾りみたいなものですので、今回は説明しません。
</p>

<h3 class="midashi02">スコープとは</h3>
<p>
  SQL文をメソッドのようにいくつも結合させて使えます。
  複数の検索条件がある場合、「条件Aは入れるけど、条件Bは入れない」みたいなときに使うと便利です。
</p>

<h3 class="midashi02">paramsとは</h3>
<p>
  リクエストにより、URLから送られてきた値（GET）やフォームで入力した値（POST）が格納されているものです。
  paramsに入ってくるのはrailsの仕様です。params[:パラメータ名]で取得することができます。
</p>

<br>
<h2 class="midashi01">②task.rb（モデル）</h2>

<span class="prettyprint-filename">/app/models/task.rb</span>
<pre class="prettyprint linenums">
class Task < ApplicationRecord

  #kanryo（文字列）の値がある場合、絞り込みを行う
  scope :by_kanryo, ->(kanryo){
    if kanryo.present?
      #bool型の変数
      kanryo_bool = true
      if kanryo == "true"
        kanryo_bool = true
      else
        kanryo_bool = false
      end
      where('kanryo = ?', kanryo_bool)
    end
  }

end
</pre>

<p>
  スコープは取得したデータ、ここではTasksテーブルの全行から絞り込みを行います。
</p>

<p>
  5行目のkanryo.present?はkanryoが「nil」か「空文字」ではないときにtrueとなります。
  非常によく使用するメソッドです。
</p>

<p>
  13行目のwhereのところで、取得に使用するSQL文に条件式を追加しています。
</p>

<br>
<h2 class="midashi01">③index.html.erb</h2>

<span class="prettyprint-filename">/app/views/tasks/index.html.erb</span>
<pre class="prettyprint linenums">
&lt;h2&gt;一覧画面&lt;/h2&gt;
&lt;table class="table table-bordered"&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th class="grid-th-width1 pc-only"&gt;No&lt;/th&gt;
    &lt;th class="grid-th-width2"&gt;タスク&lt;/th&gt;
    &lt;th class="grid-th-width3"&gt;期限&lt;/th&gt;
    &lt;th class="grid-th-width4"&gt;ｽﾃｰﾀｽ&lt;/th&gt;
    &lt;th class="grid-th-width5"&gt;編集&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;% @tasks.each do |task| %&gt;
      &lt;tr style="height:48px;"&gt;
        &lt;td class="pc-only"&gt;&lt;%= @grid_no.to_s %&gt;&lt;/td&gt;
        &lt;td style="vertical-align: middle"&gt;&lt;%= task.name %&gt;&lt;/td&gt;
        &lt;td style="vertical-align: middle"&gt;&lt;%= kigen_format(task.kigen) %&gt;&lt;/td&gt;
        &lt;td style="vertical-align: middle"&gt;&lt;%= kanryo_tag(task) %&gt;&lt;/td&gt;
        &lt;td class="henshu-cell"&gt;

        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;% @grid_no = @grid_no + 1 %&gt;
  &lt;% end %&gt;
  &lt;tbody&gt;
  &lt;/table&gt;
&lt;div style="text-align: center"&gt;
  &lt;%= will_paginate @tasks,
                    renderer: BootstrapPagination::Rails,
                    previous_label: "前へ",
                    next_label: "次へ",
                    inner_window: 1,
                    outer_window: 0,
                    class:"pagination-sm"
  %&gt;
&lt;/div&gt;
</pre>

<p>
  13行目〜24行目まではループになっています。
  <strong class="red">&lt;% 〜 %&gt;の中はrubyのコードが書けます。</strong>
  「@tasks.each do |task|」は@tasks（ActiveRecord配列）を1レコードずつ変数taskに格納してループするという意味です。
  つまり、@tasksの数分グリッドの行を作成して内容を表示しています。
  このループは24行目の&lt;% end %&gt;までです。
</p>

<p>
  16行目のtask.nameはtask（ActiveRecord）のnameカラムを表示する書き方です。
  <strong class="red">&lt;%= 〜 %&gt;は変数の値などを表示する時に使用します。</strong>
</p>

<p>
  17行目のkigen_formatはこのあと説明する自作のヘルパーメソッドです。
  task.kigenは日付型ですので、文字列のYYYY/MM/DD型に変換しています。
</p>

<p>
  18行目のkanryo_tagも自作のヘルパーメソッドです。
  タスクが未完了の場合、完了ボタンを表示させ、未完了の場合、"済"の文字列を表示するメソッドです。
</p>

<p>
  27行目〜35行目はのwill_paginateを使用する場合のお決まりの書き方です。
  コントローラーと同じで、簡単にページングが出来るということだけ覚えておいて下さい。
</p>

<h3 class="midashi02">ヘルパーメソッドとは</h3>
<p>
  HTMLにrubyのコードをたくさん書くと可読性が悪くなってしまうので、それを防ぐ目的で用意されています。
  ヘルパーメソッドには予め用意されているものと、自作のものがあります。自作のものは
  「rails g controller tasks」でコントローラー作成したときに一緒に作成されています。
  機能的には普通のrubyのクラスですので、なんでも書くことが出来ますが、
  動的にHTMLタグを生成したり、表示用に形式を整えるなど、HTMLの表示に関わる処理を書くのがいいでしょう。
</p>

<br>
<h2 class="midashi01">④tasks_helper.rb</h2>

<span class="prettyprint-filename">/app/helpers/tasks_helper.rb</span>
<pre class="prettyprint linenums">
module TasksHelper

  #タスクが完了している場合、"済"を表字する
  #タスクが未完了の場合、完了ボタンを表字する
  def kanryo_tag(task)
    result = ""
    if task.kanryo == true
      result = '済'
    else
      result = '&lt;a class="btn btn-sm btn-primary" href="' + kanryo_task_path(task) + '"&gt;完了&lt;/a&gt;'
    end
    #文字列をそのままHTMLタグとして出力
    result.html_safe
  end

  #期限（日付型）をYYYY/MM/DD形式の文字列で表示する
  def kigen_format(kigen)
    result = ""
    if kigen.present?
      result = kigen.strftime("%Y/%m/%d")
    end
    result
  end

end
</pre>

<p>
  kanryo_tagメソッドはコメントにも書きましたが、タスクのステータスにより、ボタンと文字列を分けて表示するメソッドです。
  10行目の<strong>kanryo_task_path(task)はtasks_controllerのkanryoアクションに飛ばすURLを生成してくれます</strong>。
</p>

<p>
  13行目のhtml_safeは、「この文字列は安全なものだからHTMLタグとしてそのまま出力します。」という書き方です。
  この1行を書かない場合、タグがただの文字列として出力されてしまいます。
</p>

<p>
  20行目のkigen.strftime("%Y/%m/%d")は日付型から文字列へ変換するときにフォーマットを決めて出力するやり方です。
  「"%Y/%m/%d"」はYYYY/MM/DD形式になります。
</p>

<br>
<h2 class="midashi01">動作確認</h2>

<p>
  「rails s」でサーバーを起動して、「localhost:3000」にアクセスします。
  以下のようにグリッドが表示された画面が表示されればOKです。
  ページングは出来ていますが、完了ボタンを押しても処理を書いていないので何も起こりません。
</p>

<div class="box01">
  <a href="https://www.images.program777.com/201710/20171017_1.jpg" data-lightbox="20171017_1">
    <img src="https://www.images.program777.com/201710/20171017_1.jpg" style="width:100%">
  </a>
</div>

<br><br>
<h2 class="midashi01">railsコンソールでリンクパスを確認しよう！</h2>

<p>
  余裕のある人は、ヘルパーメソッドで出てきたkanryo_task_path(task)が実際どのような値になっているか、
  railsコンソールで確認してみましょう。
  「rake routes」の左側に書いてあるものに「_path」と付けることでパスを生成することができます。
</p>

<div class="box01">
  <a href="https://www.images.program777.com/201710/20171017_2.jpg" data-lightbox="20171017_2">
    <img src="https://www.images.program777.com/201710/20171017_2.jpg" style="width:100%">
  </a>
</div>

<pre class="console" style="overflow-x: scroll;">
<span>test1にTasksテーブルの一番最初のレコードを代入する</span>
> test1 = Task.first

<span>id1にtest1のidを代入する</span>
> id1 = test1.id

<span>完了のパスを取得（引数にidを渡しています）</span>
<span>※「app.」とすることでURLヘルパーを呼び出せます</span>
> app.kanryo_task_path(id1)

<span>完了のパスを取得（上と同じ結果ですが、引数にActiveRecordを渡しています）</span>
> app.kanryo_task_path(test1)

<span>登録画面用のパスを取得</span>
> app.new_task_path

<span>照会画面用のパスを取得</span>
> app.task_path(test1)

</pre>

<%= render "/articles/article_footer" %>
