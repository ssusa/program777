<%= render "/articles/article_header" %>
<p>
  前回までの記事で、タスク管理アプリで使用するテーブルとその中身、それに紐づくActiveRecordが出来上がりました。
  今回はHTTP通信とルーティングについて説明します。<strong>ルーティングはrailsフレームワークの中でも特に重要な機能</strong>ですので、ここは飛ばせません。
  さらに、ルーティングを理解する上で、HTTP通信の知識は必須ですので、HTTP通信も解説します。
</p>

<br>
<h2 class="midashi01">HTTP通信</h2>

<p>
  HTTP通信とはブラウザとサーバのやりとりに使われるプロトコル（通信手段です）。
  私達がインターネットを見るときに必ず使用しています。
</p>

<h3 class="midashi03"><span>①リクエストとレスポンス</span></h3>
<div class="box01">
  <a href="https://www.images.program777.com/201710/20171009_1.jpg" data-lightbox="20171009_1">
    <img src="https://www.images.program777.com/201710/20171009_1.jpg" style="width:100%">
  </a>
</div>
<p>
  HTTP通信の仕組みはシンプルで、ブラウザがサーバーにリクエストを送り、サーバーがそれに答えてレスポンスを返します。
  リクエストには送信先のURL、送信元OS、送信元マシンの情報などが記載されています。
  レスポンスには主にHTMLなど、ブラウザに表示するための情報が含まれています。
</p>

<h3 class="midashi03"><span>②URL</span></h3>
<p>
  https://<span style="font-weight: bold;color:blue">www.program777.com</span>/<span style="font-weight: bold;color:red">articles/201710/20171009</span>
</p>
<p>
  これはこのページのURLです。
  HTTPのURLは大きく分けて2つに分かれています。青字がサーバー名で、赤字がパスです。
  <strong>railsではこのパスが、そのままファイルパスとなるわけではありません。ルーティングによりファイルパスを決定します。</strong>
</p>

<h3 class="midashi03"><span>③HTTPメソッド</span></h3>
<p>
  HTTP通信には送信の種類を分類するHTTPメソッド（GET、POST）というものが用意されています。
  このHTTPメソッドが、このあと説明するルーティングに大きく関係しています。
</p>

<div class="box01">
  <a href="https://www.images.program777.com/201710/20171009_2.jpg" data-lightbox="20171009_2">
    <img src="https://www.images.program777.com/201710/20171009_2.jpg" style="width:100%">
  </a>
</div>
<p>
  GETはURLのみでリクエストを送ることができます。ブラウザのアドレスバーに直接URLを入れたり、リンクをクリックしたりして、
  画面が切りかわった時にはGETメソッドが使用されています。
  <strong>GETの役割は、データの取得です。</strong>
</p>
<div class="box01">
  <a href="https://www.images.program777.com/201710/20171009_3.jpg" data-lightbox="20171009_3">
    <img src="https://www.images.program777.com/201710/20171009_3.jpg" style="width:100%">
  </a>
</div>
<p>
  POSTはURLに加えて、データも送信します。
  主に入力フォームがある場合（formタグがある場合）はPOSTメソッドが使用されることがほとんどです。
  今回作成するタスク管理アプリであれば、登録時や更新時に使用します。
  <strong>POSTの役割は、データの更新です。</strong>
</p>

<br>
<h2 class="midashi01">ルーティング</h2>

<p>
  ルートファイルの設定（ルーティングの設定）をします。
  <strong style="color:red;text-decoration: underline">ルーティングとは、URLからコントローラーのアクションを選択することです。</strong>
  railsで作られたアプリはこのルートファイルに書いてあるパスしか受け付けません。
  「/config/routes.rb」ファイルを以下のように書き換えてください。（上のソースだけコピーしてください）
</p>

<span class="prettyprint-filename">/db/seeds.rb</span>
<pre class="prettyprint">
Rails.application.routes.draw do
  #tasksコントローラーの7つのアクションを作成する
  resources :tasks do
    member do
      #一覧画面 完了ボタン押下時のアクション
      get "kanryo"
    end
  end
end
</pre>


<span class="prettyprint-filename">/db/seeds.rb</span>
<pre class="prettyprint">
#!!!!これは参考のソースです。コピーは上のものだけでOKです。!!!!
Rails.application.routes.draw do

  #一覧画面 表示のアクション（resoucesの一つ）
  get    "tasks/index",    to: "tasks#index"

  #照会画面 表示のアクション（resoucesの一つ）
  get    "tasks/:id",      to: "tasks#show"

  #新規登録画面 表示のアクション（resoucesの一つ）
  get    "tasks/new",      to: "tasks#new"

  #編集画面 表示のアクション（resoucesの一つ）
  get    "tasks/:id/edit", to: "tasks#edit"

  #新規登録画面 登録ボタン押下時のアクション（resoucesの一つ）
  post   "tasks/create",   to: "tasks#create"

  #編集画面 更新ボタン押下時のアクション（resoucesの一つ）
  put    "tasks/:id",      to: "tasks#update"

  #一覧画面 削除ボタン押下時のアクション（resoucesの一つ）
  delete "tasks/:id",      to: "tasks#destroy"

  #一覧画面 完了ボタン押下時のアクション
  get    "kanryo/:id",     to: "tasks#kanryo"

end
#!!!!これは参考のソースです。コピーは上のものだけでOKです。!!!!
</pre>

<p>
  この2つのソースは全く同じことをしています。上のソースは下のソースを簡単に書いたものです。
  <strong>ここで一番重要なのは、上のソースの「resources :tasks」の1行です。</strong>
  これは、後に出てくるTasksコントローラーに、決まった7つのアクションのルートを設定するというものです。
  単純なマスタ画面の作成では、この7つのアクションを使うことが多いので、開発効率のために、このようなresourcesという書き方が用意されています。
</p>

<p style="font-weight: bold">
  「一覧画面 表示のアクション」について説明します。
</p>
<span style="font-weight: bold;border: 1px solid #777;padding:2px;margin-left:10px">①get ②"tasks/index", ③to: "tasks#index"</span>
<ul>
  <li>①はHTTPメソッドです。</li>
  <li>②はパス、つまりURLの一部（HTTP通信のURLの説明で書いた赤文字の部分）です。</li>
  <li>③はアクションです。この場合、Tasksコントローラーのindexアクションです。</li>
</ul>

<p style="font-weight: bold">
「編集画面 表示のアクション」について説明します。
</p>
<span style="font-weight: bold;border: 1px solid #777;padding:2px;margin-left:10px">get ④"tasks/:id/edit", to: "tasks#edit"</span>
<ul>
  <li>②の「:id」の部分はTasksテーブルのキー列であるidが入ります。
    例えば、「tasks/12/edit」とすると、"Tasksテーブルのid値が12のレコードの編集画面を表示する。" ということになります。
    このように、URLから何をするかが分かるようなURLの書き方をRESTといいます。
  </li>
</ul>

<br>
<p>
  ややこしいところですので、表にしておきました。
</p>

<h3>resourcesのルーティング</h3>
<table class="type02">
  <thead>
  <tr>
    <th>アクション</th>
    <th>パス</th>
    <th>HTTPメソッド</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td>index</td>
    <td>/tasks</td>
    <td>GET</td>
  </tr>
  <tr>
    <td>show</td>
    <td>/tasks/:id</td>
    <td>GET</td>
  </tr>
  <tr>
    <td>new</td>
    <td>/tasks/new</td>
    <td>GET</td>
  </tr>
  <tr>
    <td>edit</td>
    <td>/tasks/:id/edit</td>
    <td>GET</td>
  </tr>
  <tr>
    <td>create</td>
    <td>/tasks</td>
    <td>POST</td>
  </tr>
  <tr>
    <td>update</td>
    <td>/tasks/:id</td>
    <td>PUT</td>
  </tr>
  <tr>
    <td>destroy</td>
    <td>/tasks/:id</td>
    <td>DELETE</td>
  </tr>
  </tbody>
</table>

<h3 class="midashi02">HTTPメソッドのput、deleteとは</h3>
<p>
  現在のブラウザはPUTメソッドとDELETEメソッドには対応しておらず、HTMLの仕様ではフォームのmethod属性にはGETとPOSTしか指定できません。
  このため、ルートファイルにput、deleteなどと書いても、実際にはPOSTメソッドで送信されます。
</p>
<p>
  実はGemFileのこの行でインストールされるjsファイルが帳尻をあわせてくれていて、ルートファイルにputと書いた場合、
  実際はPOSTメソッドを使用していますが、あたかもPUTメソッドを使用したかのように見せてくれています。
</p>

<span class="prettyprint-filename">/Gemfile</span>
<pre class="prettyprint">
#httpメソッドの置き換えを行ってくれる
gem 'rails-ujs', '= 0.1.0'
</pre>

<br>
<h2 class="midashi01">ルーティングの確認</h2>

<p>
  task_kanriディレクトリで以下のコマンドを実行してください。
  task_kanriの全てのルーティングが表示されます。タスク管理アプリではこれ以外の形式のパスは受け付けません。
  「rails db:seed」としても同じです。
</p>

<pre class="console">
$ rake routes
</pre>

<%= render "/articles/article_footer" %>