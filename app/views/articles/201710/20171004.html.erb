<%= render "/articles/article_header" %>
<p>
  一般的にアプリを作成するときは、データベースから作成していくと楽です。
  なぜなら、上位階層であるhtmlや処理部分を作成してもデータがないと動かせないし、データベースの仕様はあまりブレないからです。<br><br>
  データベース自体は<a style="text-decoration: underline" href="/articles/201709/20170930">前回の記事</a>の「bundle install」で出来上がっています。
  ファイルは「task_kanri/db/development.sqlite3」です。
  もちろん中身は空でテーブルがありませんので、ここではテーブルとモデルの作成を行います。
</p>

<br>
<h2 class="midashi01">modelの作成</h2>
<p>
  まずはモデルを作成します。タスク管理アプリのモデル（ActiveRecord）は1つだけです。
  task_kanriディレクトリで以下のコマンドを実行してください。taskのマイグレーションファイルとモデルファイルが出来上がります。
</p>

<pre class="console">
$ rails g model task
</pre>

<h3 class="midashi02">ActiveRecordとは</h3>
<p>
  railsフレームワークの中に含まれるO/Rマッピングのことです。
  つまり、ここでは<strong>タスク管理アプリとsqliteとのやりとりを簡単に行ってくれるフレームワーク</strong>です。
  また、実テーブルに紐付いているモデルのことを、ActiveRecordともいいます。
</p>
<h3 class="midashi02">Modelとは</h3>
<p>
  MVCのMの部分。分かり辛いうちは、単純なクラスと考えてもいいでしょう。
  railsのルールですが、<strong>モデル名は単数形</strong>です。
  <strong>モデルがActiveRecordの場合、1つのテーブルにつき、1つのモデルが対応します。</strong>
  C#をやったことがある人であれば、ActiveRecordが型付DataTableで、ただのModelが型無DataTableと考えればいいでしょう。
</p>
<h3 class="midashi02">rails g modelとは</h3>
<p>
  ActiveRecordのモデルを作成してくれるコマンドです。以下の2ファイルが作成されます。<br>
  マイグレーションファイル → task_kanri/db/migrate/2017~_create_tasks.rb<br>
  モデル → task_kanri/app/models/task.rb
</p>
<h3 class="midashi02">マイグレーションファイルとは</h3>
<p>
  データベースのテーブルの詳細が書かれたファイルで、このファイルは無くてもアプリは動きます。
  テーブルの定義を書いて、コマンドを実行することでデータベースにテーブルが作成されます。
  マイグレーションファイルはActiveRecordと実テーブルの差が出てしまうことを防ぐためにあります。
</p>

<br>
<h2 class="midashi01">マイグレーションする</h2>
<p>
  <a style="text-decoration: underline" href="/articles/201709/20170927">仕様の確認の記事</a>でも記載しましたが、
  以下のテーブルを作成しますので、「task_kanri/db/migrate/2017~_create_tasks.rb」ファイルにそのままコピーペーストして「rake db:migrate」コマンドを実行します。
  コマンドが流れてsqliteにテーブルが作成されたログが出力されます。
</p>
<p>
  マイグレーションファイルにはID列がありませんが、これはrailsの仕様で、<strong>主キーはID列一つと決まっている</strong>からです。
  ActiveRecordはデータベースに依存しないため、sqliteであれば、オートインクリメント値をID列として自動で設定してくれます。
  もしデータベースがoracleなのであれば、oracleシーケンスを自動で設定してくれます。プログラムを変えることなく、データベースの変更もできるというわけです。
</p>
<p>
  マイグレーションファイルの最後にあるtimestampsは、created_atとupdated_at列を追加してくれます。
  INSERT文が走った場合はcreated_atとupdated_atに、UPDATE文が走った場合はupdated_atに更新時間を設定してくれます。
</p>
<ul>
  <li>タスクテーブル
    <ul>
      <li>ID（数値型）…主キー</li>
      <li>タイトル（文字列型）</li>
      <li>詳細（文字列型）</li>
      <li>期限（日付型）</li>
      <li>ステータス（ブール型）</li>
    </ul>
  </li>
</ul>

<span class="prettyprint-filename">/db/2017~_create_tasks.rb</span>
<pre class="prettyprint">
class CreateTasks < ActiveRecord::Migration[5.0]
  def change
    create_table :tasks do |t|
      t.string :name
      t.string :shosai
      t.datetime :kigen
      t.boolean :kanryo
      t.timestamps
    end
  end
end
</pre>

<pre class="console">
$ rake db:migrate
</pre>

<h3 class="midashi02">rake db:migrateとは</h3>
<p>
  マイグレーションファイルから実際のテーブルを作成するコマンドです。
  rails5からrakeコマンドが全てrailsコマンドとしても実行できるようになったため、「rails db:migrate」としても同じです。
</p>

<br>
<h2 class="midashi01">テーブルの確認</h2>
<p>
  sqliteのテーブルの中身を見れる環境があればいいのですが、無い場合、railsコンソールから見ることができます。
  task_kanriディレクトリで以下の「rails c」コマンドを実行してコンソール内で「Task.all」と入力します。データがありませんが、SQL文が発行されたのがわかります。
  終了するときは「exit」と入力します。
</p>

<pre class="console">
$ rails c
</pre>

<pre class="console">
irb(main):001:0> Task.all
</pre>

<h3 class="midashi02">railsコンソールとは</h3>
<p>
  railsの環境を読み込んだ状態でrubyコードを実行できるツールです。
  「Task.all」と入力したことでSQL文(select tasks.* from tasks)がActiveRecord経由で発行されました。
</p>