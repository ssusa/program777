<%= render "/articles/article_header" %>

<p>
  今回の編集画面でタスク管理アプリは完成です。
  編集画面は新しいことはassign_attributesくらいですので、
  プログラムが何をしているのか理解できていればコピー&ペーストで完了です。
</p>

<br>
<h2 class="midashi01">①tasks_controller.rb編集</h2>

<span class="prettyprint-filename">/app/controllers/tasks_controller.rb</span>
<pre class="prettyprint linenums">
︙

#編集画面 表示のアクション
def edit

  #idでタスクテーブルを取得
  @task = Task.find(params[:id])

  #期限に値がある場合、日付型から文字列へ変換
  if @task.kigen.present?
    @task.kigen_str = @task.kigen.strftime("%Y%m%d")
  end

end

︙

#編集画面 更新ボタン押下時のアクション
def update

  #POSTされた値(id)からレコードを取得
  @task = Task.find(params[:id])

  #レコードをPOSTされた値(入力値)で上書き
  @task.assign_attributes(task_params)

  #エラーチェック
  if @task.valid?
    #--------------
    #エラーがない場合
    #--------------
    if @task.kigen_str.present?
      @task.kigen = Date.new(
        @task.kigen_str[0..3].to_i,
        @task.kigen_str[4..5].to_i,
        @task.kigen_str[6..7].to_i)
    end

    #更新（エラーチェックを行わない）
    @task.save(validate:false)

    #フラッシュ（一度きりのセッション）にメッセージを格納
    flash[:msg] = "編集しました。"

    #一覧画面へリダイレクト
    redirect_to tasks_path
  else
    #--------------
    #エラー時
    #--------------
    render "edit"
  end
end

︙
</pre>

<p>
  3行目〜14行目のeditアクションはコメントに書いてあるとおりで、
  Tasksテーブルのから該当のレコードを取得し、編集画面用のviewを表示します。
</p>

<p>
  18行目〜53行目のupdateアクションは画面から入力されて、POSTされた値をチェックして、エラーがなければデータベースを更新する処理です。
</p>

<p>
  25行目の@task.assign_attributes(task_params)は
  @taskをポストされた値で更新する処理です。これはメモリ上の更新で実際の更新は40行目のsaveで行います。
</p>

<br>
<h2 class="midashi01">②edit.html.erb</h2>

<span class="prettyprint-filename">/app/views/tasks/new.html.erb</span>
<pre class="prettyprint linenums">
&lt;h2&gt;編集画面&lt;/h2&gt;
&lt;div class="waku"&gt;
  &lt;%= form_for @task do |f| %&gt;
      &lt;%= render "form", f: f %&gt;
      &lt;div class="row well" style="margin:20px 0 0 0;padding:10px;"&gt;
        &lt;div class="col-sm-12"&gt;
          &lt;%= link_to "キャンセル", tasks_path, class:"btn btn-default", style:"float:left;" %&gt;
          &lt;%= f.submit "編集する", class:"btn btn-primary", style:"float:right" %&gt;
        &lt;/div&gt;
      &lt;/div&gt;
  &lt;% end %&gt;
&lt;/div&gt;
</pre>

<p>
  edit.html.erbファイルはnew.html.erbファイルとほぼ同じで、
  画面の名称とボタンの名称が違うだけです。
  @taskをテンプレートファイル「_form.html.erb」に渡して、データを表示しています。
</p>

<br>
<h2 class="midashi01">動作確認</h2>

<p>
  「rails s」でサーバーを起動して、「localhost:3000」にアクセス、適当なタスクをリンクを押下して編集画面を開きます。
  以下を確認して下さい。登録画面とほぼ同じですが、念のため、確認します。
</p>
<ul>
  <li>
    期限のテキストボックスをクリックし、カレンダーコントロールが表示されること
  </li>
  <li>
    タスク名称を空のまま編集ボタン押下でエラーとなること
  </li>
  <li>
    タスク名称に21文字入力して編集ボタン押下でエラーとなること
  </li>
  <li>
    タスク名称に20文字入力して編集ボタン押下でエラーとならないこと
  </li>
  <li>
    タスク詳細に101文字入力して編集ボタン押下でエラーとなること
  </li>
  <li>
    タスク詳細に100文字入力して編集ボタン押下でエラーとならないこと
  </li>
  <li>
    期限を手入力でYYYYMMDD型以外をセットし編集ボタン押下でエラーとなること
  </li>
  <li>
    タスク名称、タスク詳細、期限に正しい値を入力後、一覧へ戻り、値が反映されていること
  </li>
</ul>

<br>
<h2 class="midashi01">完成です！</h2>

<p>
  これで完成です。
  ソースをgithubにアップしておきました。
  <br>
  <a href="https://github.com/svalley-work3/task_kanri">プログラムソース(github)</a>
</p>

<%= render "/articles/article_footer" %>